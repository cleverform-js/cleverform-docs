{"version":3,"sources":["webpack:///../src/documentation/01 introduction/03. simplest-usage.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAMaA,G,UAAe,S,0OAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,oQAGA,oGACA,iBAAQ,CACN,GAAM,aADR,aAGA,oEAAmD,sBAAQC,WAAW,KAAnB,aAAnD,yBACA,mCAAkB,kBAAIA,WAAW,KAAf,eAClB,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,o0HA+FL,iBAAQ,CACN,GAAM,mBADR,mBAGA,mEAAkD,sBAAQA,WAAW,KAAnB,cAAlD,6BACA,mCAAkB,kBAAIA,WAAW,KAAf,cAClB,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qoF,wOAiFTJ,EAAWK,gBAAiB","file":"component---src-documentation-01-introduction-03-simplest-usage-mdx-d8f89d627623c12e295e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/Lums/Documents/______ Projects/___cleverform-js/cleverform-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"simplest-usage\"\n    }}>{`Simplest Usage`}</h1>\n    <p>{`Cleverform is very easy to use and integrate in your project.\nBelow is the example usage of the library. The example form is a registration form with basic fields.\nYou can copy and experiment on the codes below to understand it more.`}</p>\n    <p>{`The codes includes comments that will help you understand more the library.`}</p>\n    <h2 {...{\n      \"id\": \"html-part\"\n    }}>{`HTML Part`}</h2>\n    <p>{`Below is the html code for the form. We use `}<strong parentName=\"p\">{`bootstrap`}</strong>{` for the CSS library.`}</p>\n    <p>{`Filename : `}<em parentName=\"p\">{`index.html`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!doctype html>\n<html lang=\"en\">\n<head>\n    <!-- Include Bootstrap CSS library -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\">\n    <title>CleverForm registration example</title>\n</head>\n\n<body>\n    <div class=\"container pt-5\">\n\n        <h3 class=\"text-center\">Registration form</h3>\n\n        <form method=\"POST\" id=\"registrationForm\" action=\"/\">\n\n            <div class=\"form-group row\">\n                <label for=\"f_name\" class=\"col-sm-2 col-form-label\">First name</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"text\" class=\"form-control\" id=\"f_name\" name=\"f_name\">\n                    <!-- Div with \\`cf-msg\\` attribute will hold the error messages(if have error). -->\n                    <div cf-msg=\"f_name\"></div>\n                    <!-- In the example above, when the \\`f_name\\` field have validation error the div will hold the error msg of the \\`f_name\\`. Same as the other fields below. -->\n                </div>\n            </div>\n        \n            <div class=\"form-group row\">\n                <label for=\"l_name\" class=\"col-sm-2 col-form-label\">Last name</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"text\" class=\"form-control\" id=\"l_name\" name=\"l_name\">\n                    <div cf-msg=\"l_name\"></div>\n                </div>\n            </div>\n\n            <div class=\"form-group row\">\n                <label for=\"email\" class=\"col-sm-2 col-form-label\">Email</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\">\n                    <div cf-msg=\"email\"></div>\n                </div>\n            </div>\n        \n            <div class=\"form-group row\">\n                <label for=\"password\" class=\"col-sm-2 col-form-label\">Password</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\">\n                    <div cf-msg=\"password\"></div>\n            \n                </div>\n            </div>\n            \n            <div class=\"form-group row\">\n                <label for=\"confirm_password\" class=\"col-sm-2 col-form-label\">Confirm password</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"password\" class=\"form-control\" id=\"confirm_password\" name=\"confirm_password\">\n                    <div cf-msg=\"confirm_password\"></div>\n            \n                </div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-sm-10 offset-sm-2\">\n                    <div class=\"form-check\">\n                        <input class=\"form-check-input\" type=\"checkbox\" id=\"tou_pp\" name=\"tou_pp\">\n                        <label class=\"form-check-label\" for=\"tou_pp\">\n                            Accept <a href=\"#\">Terms of Use</a> & <a href=\"#\">Privacy Policy</a>\n                        </label>\n                        <div cf-msg=\"tou_pp\"></div>\n                    </div>\n                </div>\n            </div>\n            \n        \n            <div class=\"form-group row\">\n                <div class=\"offset-sm-2 col-sm-10\">\n                    <!-- The \\`cf-submitting-msg\\` attribute value will be the submitting message when the form is in submitting status. It will replace the \\`Register\\` value of the button -->\n                    <button disabled type=\"submit\" class=\"btn btn-primary btn-block\" cf-submitting-msg='Registering...'>Register</button>\n                </div>\n            </div>\n        \n        </form>\n\n    </div>\n\n    <!-- CleverForm library -->\n    <script src=\"cleverform.js\"></script>\n\n    <!-- Include \\`sample.js\\` -->\n    <script src=\"sample.js\"></script>\n\n</body>\n\n</html>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"javascript-part\"\n    }}>{`Javascript Part`}</h2>\n    <p>{`Below is the javascript code for using the `}<strong parentName=\"p\">{`CleverForm`}</strong>{` for the html form above.`}</p>\n    <p>{`Filename : `}<em parentName=\"p\">{`sample.js`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const regForm = new CleverForm({\n\n    // The id of the html form\n    id: \"registrationForm\",\n\n    // The validation rules per field's name, one or many validation rules per field seperated by pipe '|'\n    rules: {\n        f_name: \"required | minLen:2 | maxLen:50\",\n        l_name: \"required | betweenLen:2,50\",\n        email: \"required | email\",\n        password: \"required | minLen:6 \",\n        confirm_password: \"required| matched:password\",\n        tou_pp: \"accepted\",\n    },\n\n    // Customize the name of the field in the error messages by overriding some field's name.\n    customName: {\n        f_name: \"first name\",\n        l_name: \"last name\",\n        confirm_password: \"confirm possword\",\n        tou_pp: \"terms of use & privacy policy\",\n    },\n\n    // Customized the css Class to be used by CleverForm depending on the fields status( with or with out error)\n    // in this example we use bootstrap css class for fields status\n    cssClass: {\n        fieldSuccess: \"is-valid\",\n        fieldError: \"is-invalid\",\n        labelSuccess: \"valid-feedback\",\n        labelError: \"invalid-feedback\",\n    },\n\n\n    // formEvents property holds the events listeners where you can response to.\n    formEvents: {\n\n        // Event when the form is initialized by CleverForm\n        onInit: function() {\n\n            // Your codes here ...\n            console.log(\"regForm Initialized! \");\n        },\n\n        // Event when the form have field with validation error when submitted.\n        onError: function(errors, errorsCount, attemptsWithError) {\n\n            // Your codes here ...\n            console.clear();\n            console.log(\"Form has validation error.\");\n\n            console.log(\"Errors object: \", errors);\n            console.log(\"Fields with error: \", errorsCount);\n            console.log(\"Form submit attempts : \", attemptsWithError);\n        },\n\n        // Event when the form have no validation error.\n        // When you omit \\`onSuccess\\` event listener, the form will be submitted via form native POST/GET request (ex. on PHP server)\n        // But when you use \\`onSuccess\\` event listener, your program is intended to be send via XHR (ex: AJAX , fetch and axios)\n        onSuccess: function(validatedData, formData) { //, formSubmit\n\n            // Your codes here ...\n            // You can submit \\`formData\\` object via XHR (ex: AJAX , fetch and axios)..\n\n            console.clear();\n            console.log(\"Success , Form has No error.\");\n\n            console.log(\"validatedData Object: \", validatedData);\n            console.log(\"formData Object: \", formData);\n\n\n        },\n  }\n\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}