(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{AKVL:function(e,n,o){"use strict";o.r(n),o.d(n,"_frontmatter",(function(){return i})),o.d(n,"default",(function(){return m}));var t=o("Fcif"),r=o("+I+c"),s=(o("mXGw"),o("/FXl")),a=o("TjRS"),i=(o("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/documentation/01 introduction/03. simplest-usage.mdx"}});var l={_frontmatter:i},c=a.a;function m(e){var n=e.components,o=Object(r.a)(e,["components"]);return Object(s.b)(c,Object(t.a)({},l,o,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"simplest-usage"},"Simplest Usage"),Object(s.b)("p",null,"Cleverform is very easy to use and integrate in your project.\nBelow is the example usage of the library. The example form is a registration form with basic fields.\nYou can copy and experiment on the codes below to understand it more."),Object(s.b)("p",null,"The codes includes comments that will help you understand more the library."),Object(s.b)("h2",{id:"html-part"},"HTML Part"),Object(s.b)("p",null,"Below is the html code for the form. We use ",Object(s.b)("strong",{parentName:"p"},"bootstrap")," for the CSS library."),Object(s.b)("p",null,"Filename : ",Object(s.b)("em",{parentName:"p"},"index.html")),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-html"}),'<!doctype html>\n<html lang="en">\n<head>\n    \x3c!-- Include Bootstrap CSS library --\x3e\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">\n    <title>CleverForm registration example</title>\n</head>\n\n<body>\n    <div class="container pt-5">\n\n        <h3 class="text-center">Registration form</h3>\n\n        <form method="POST" id="registrationForm" action="/">\n\n            <div class="form-group row">\n                <label for="f_name" class="col-sm-2 col-form-label">First name</label>\n                <div class="col-sm-10">\n                    <input type="text" class="form-control" id="f_name" name="f_name">\n                    \x3c!-- Div with `cf-msg` attribute will hold the error messages(if have error). --\x3e\n                    <div cf-msg="f_name"></div>\n                    \x3c!-- In the example above, when the `f_name` field have validation error the div will hold the error msg of the `f_name`. Same as the other fields below. --\x3e\n                </div>\n            </div>\n        \n            <div class="form-group row">\n                <label for="l_name" class="col-sm-2 col-form-label">Last name</label>\n                <div class="col-sm-10">\n                    <input type="text" class="form-control" id="l_name" name="l_name">\n                    <div cf-msg="l_name"></div>\n                </div>\n            </div>\n\n            <div class="form-group row">\n                <label for="email" class="col-sm-2 col-form-label">Email</label>\n                <div class="col-sm-10">\n                    <input type="email" class="form-control" id="email" name="email">\n                    <div cf-msg="email"></div>\n                </div>\n            </div>\n        \n            <div class="form-group row">\n                <label for="password" class="col-sm-2 col-form-label">Password</label>\n                <div class="col-sm-10">\n                    <input type="password" class="form-control" id="password" name="password">\n                    <div cf-msg="password"></div>\n            \n                </div>\n            </div>\n            \n            <div class="form-group row">\n                <label for="confirm_password" class="col-sm-2 col-form-label">Confirm password</label>\n                <div class="col-sm-10">\n                    <input type="password" class="form-control" id="confirm_password" name="confirm_password">\n                    <div cf-msg="confirm_password"></div>\n            \n                </div>\n            </div>\n\n            <div class="form-group row">\n                <div class="col-sm-10 offset-sm-2">\n                    <div class="form-check">\n                        <input class="form-check-input" type="checkbox" id="tou_pp" name="tou_pp">\n                        <label class="form-check-label" for="tou_pp">\n                            Accept <a href="#">Terms of Use</a> & <a href="#">Privacy Policy</a>\n                        </label>\n                        <div cf-msg="tou_pp"></div>\n                    </div>\n                </div>\n            </div>\n            \n        \n            <div class="form-group row">\n                <div class="offset-sm-2 col-sm-10">\n                    \x3c!-- The `cf-submitting-msg` attribute value will be the submitting message when the form is in submitting status. It will replace the `Register` value of the button --\x3e\n                    <button disabled type="submit" class="btn btn-primary btn-block" cf-submitting-msg=\'Registering...\'>Register</button>\n                </div>\n            </div>\n        \n        </form>\n\n    </div>\n\n    \x3c!-- CleverForm library --\x3e\n    <script src="cleverform.js"><\/script>\n\n    \x3c!-- Include `sample.js` --\x3e\n    <script src="sample.js"><\/script>\n\n</body>\n\n</html>\n')),Object(s.b)("h2",{id:"javascript-part"},"Javascript Part"),Object(s.b)("p",null,"Below is the javascript code for using the ",Object(s.b)("strong",{parentName:"p"},"CleverForm")," for the html form above."),Object(s.b)("p",null,"Filename : ",Object(s.b)("em",{parentName:"p"},"sample.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'const regForm = new CleverForm({\n\n    // The id of the html form\n    id: "registrationForm",\n\n    // The validation rules per field\'s name, one or many validation rules per field seperated by pipe \'|\'\n    rules: {\n        f_name: "required | minLen:2 | maxLen:50",\n        l_name: "required | betweenLen:2,50",\n        email: "required | email",\n        password: "required | minLen:6 ",\n        confirm_password: "required| matched:password",\n        tou_pp: "accepted",\n    },\n\n    // Customize the name of the field in the error messages by overriding some field\'s name.\n    customName: {\n        f_name: "first name",\n        l_name: "last name",\n        confirm_password: "confirm possword",\n        tou_pp: "terms of use & privacy policy",\n    },\n\n    // Customized the css Class to be used by CleverForm depending on the fields status( with or with out error)\n    // in this example we use bootstrap css class for fields status\n    cssClass: {\n        fieldSuccess: "is-valid",\n        fieldError: "is-invalid",\n        labelSuccess: "valid-feedback",\n        labelError: "invalid-feedback",\n    },\n\n\n    // formEvents property holds the events listeners where you can response to.\n    formEvents: {\n\n        // Event when the form is initialized by CleverForm\n        onInit: function() {\n\n            // Your codes here ...\n            console.log("regForm Initialized! ");\n        },\n\n        // Event when the form have field with validation error when submitted.\n        onError: function(errors, errorsCount, attemptsWithError) {\n\n            // Your codes here ...\n            console.clear();\n            console.log("Form has validation error.");\n\n            console.log("Errors object: ", errors);\n            console.log("Fields with error: ", errorsCount);\n            console.log("Form submit attempts : ", attemptsWithError);\n        },\n\n        // Event when the form have no validation error.\n        // When you omit `onSuccess` event listener, the form will be submitted via form native POST/GET request (ex. on PHP server)\n        // But when you use `onSuccess` event listener, your program is intended to be send via XHR (ex: AJAX , fetch and axios)\n        onSuccess: function(validatedData, formData) { //, formSubmit\n\n            // Your codes here ...\n            // You can submit `formData` object via XHR (ex: AJAX , fetch and axios)..\n\n            console.clear();\n            console.log("Success , Form has No error.");\n\n            console.log("validatedData Object: ", validatedData);\n            console.log("formData Object: ", formData);\n\n\n        },\n  }\n\n});\n')))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/documentation/01 introduction/03. simplest-usage.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-documentation-01-introduction-03-simplest-usage-mdx-d8f89d627623c12e295e.js.map